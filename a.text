import heapq

def a_star(graph, start, goal, h):
    open_list = [(h[start], start)]  # Priority queue sorted by f(n)
    closed_list = set()
    came_from = {}
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0
         
    while open_list:
        open_list.sort()  # Ensure the node with lowest f(n) is at the front
        _, current = open_list.pop(0)

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            print("Success")
            return path[::-1]

        closed_list.add(current)

        for neighbor, cost in graph[current].items():
            if neighbor in closed_list:
                continue

            temp_g = g_score[current] + cost
            f_n = temp_g + h[neighbor]

            if temp_g < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = temp_g
                open_list.append((f_n, neighbor))

    print("Failure")
    return []

def create_graph():
    graph = {}
    n = int(input("Enter number of nodes: "))
    for _ in range(n):
        node = input("Enter node name: ")
        graph[node] = {}

    e = int(input("Enter number of edges: "))
    for _ in range(e):
        u, v, cost = input("Enter edge (node1 node2 cost): ").split()
        cost = int(cost)
        graph[u][v] = cost
        graph[v][u] = cost

    h = {}
    for node in graph:
        h[node] = int(input(f"Enter heuristic value for {node}: "))

    return graph, h

def main():
    graph, h = create_graph()
    start = input("Enter start node: ")
    goal = input("Enter goal node: ")
    path = a_star(graph, start, goal, h)
    print("A* Path:", path)

if __name__ == "__main__":
    main()