import heapq

def greedy_bfs(graph, start, goal, h):
    open_list = [(h[start], start)]
    came_from = {}
    visited = set()

    while open_list:
        open_list.sort()
        _, current = open_list.pop(0)

        if current == goal:
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            print("Success")
            return path[::-1]

        visited.add(current)

        for neighbor in graph[current]:
            if neighbor not in visited:
                came_from[neighbor] = current
                open_list.append((h[neighbor], neighbor))
                visited.add(neighbor)

    print("Failure")
    return []

def create_graph():
    graph = {}
    n = int(input("Enter number of nodes: "))
    for _ in range(n):
        node = input("Enter node name: ")
        graph[node] = {}

    e = int(input("Enter number of edges: "))
    for _ in range(e):
        u, v, cost = input("Enter edge (node1 node2 cost): ").split()
        cost = int(cost)
        graph[u][v] = cost
        graph[v][u] = cost

    h = {}
    for node in graph:
        h[node] = int(input(f"Enter heuristic value for {node}: "))

    return graph, h

def main():
    graph, h = create_graph()
    start = input("Enter start node: ")
    goal = input("Enter goal node: ")
    path = greedy_bfs(graph, start, goal, h)
    print("Greedy BFS Path:", path)

if __name__ == "__main__":
    main()