import math

# Initialize the board
def create_board():
    return [[' ' for _ in range(3)] for _ in range(3)]

# Print the board
def print_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)

# Check if the game is over (Win or Draw)
def terminal_test(board):
    for i in range(3):
        if board[i][0] == board[i][1] == board[i][2] != ' ':
            return True, board[i][0]  # Row win
        if board[0][i] == board[1][i] == board[2][i] != ' ':
            return True, board[0][i]  # Column win
    if board[0][0] == board[1][1] == board[2][2] != ' ':
        return True, board[0][0]  # Main diagonal win
    if board[0][2] == board[1][1] == board[2][0] != ' ':
        return True, board[0][2]  # Anti-diagonal win
    if all(board[r][c] != ' ' for r in range(3) for c in range(3)):
        return True, 'Draw'
    return False, None

# Get all available moves
def get_successors(board):
    return [(r, c) for r in range(3) for c in range(3) if board[r][c] == ' ']

# Utility function for terminal states
def utility(winner):
    if winner == 'O': return 1
    if winner == 'X': return -1
    return 0

# Minimax decision function
def minimax_decision(board, is_max):
    _, move = max_value(board) if is_max else min_value(board)
    return move

def max_value(board):
    is_terminal, winner = terminal_test(board)
    if is_terminal:
        return utility(winner), None
    v = -math.inf
    best_move = None
    for (r, c) in get_successors(board):
        new_board = [row[:] for row in board]
        new_board[r][c] = 'O'
        min_val, _ = min_value(new_board)
        if min_val > v:
            v, best_move = min_val, (r, c)
    return v, best_move

def min_value(board):
    is_terminal, winner = terminal_test(board)
    if is_terminal:
        return utility(winner), None
    v = math.inf
    best_move = None
    for (r, c) in get_successors(board):
        new_board = [row[:] for row in board]
        new_board[r][c] = 'X'
        max_val, _ = max_value(new_board)
        if max_val < v:
            v, best_move = max_val, (r, c)
    return v, best_move

def get_player_move(board):
    while True:
        try:
            move = input("Enter row and column (0-2) separated by space: ")
            row, col = map(int, move.split())
            
            if not (0 <= row <= 2 and 0 <= col <= 2):
                print("Position out of range! Enter numbers between 0-2.")
                continue
                
            if board[row][col] != ' ':
                print("That position is already taken!")
                continue
                
            return row, col
            
        except ValueError:
            print("Invalid input! Please enter two numbers separated by space (e.g., '1 1')")

# Main game loop
def main():
    board = create_board()
    print("Tic-Tac-Toe (Player: X, AI: O)")
    print_board(board)

    for turn in range(9):
        if turn % 2 == 0:
            row, col = get_player_move(board)
            board[row][col] = 'X'
        else:
            print("\nAI's Move:")
            move = minimax_decision(board, True)
            if move:
                board[move[0]][move[1]] = 'O'

        print_board(board)
        is_terminal, winner = terminal_test(board)
        if is_terminal:
            print("Game Over!", "Winner:", winner if winner != "Draw" else "It's a Draw!")
            break

if __name__ == "__main__":
    main()