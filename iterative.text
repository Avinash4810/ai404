def depth_limited_search(graph, start, limit, goal=None):
    stack, visited, path = [(start, 0)], set(), []
    while stack:
        node, depth = stack.pop()
        if node in visited: continue
        visited.add(node); path.append(node)
        if goal == node: return True, path
        if depth < limit:
            stack.extend((n, depth+1) for n in reversed(graph[node]) if n not in visited)
    return False, path

def iterative_deepening_search(graph, start, max_depth=999, goal=None):
    prev = set()
    for depth in range(1, max_depth + 1):
        found, path = depth_limited_search(graph, start, depth, goal)
        if found or set(path) == prev: return found, depth, path
        prev = set(path)
    return False, max_depth, list(prev)

# Example usage
if __name__ == "__main__":
    graph = {
        'A': ['B', 'C'],
        'B': ['A', 'D', 'E'],
        'C': ['A', 'F'],
        'D': ['B'],
        'E': ['B', 'F'],
        'F': ['C', 'E']
    }

    found, depth, path = iterative_deepening_search(graph, 'A', max_depth=5)
    print("Full traversal:", path)
    print("Stabilized at depth:", depth)

    goal = 'F'
    found, depth, path = iterative_deepening_search(graph, 'A', max_depth=5, goal=goal)
    print(f"\nSearching for '{goal}':")
    print(f"Found at depth {depth}: {path}" if found else "Not found.")